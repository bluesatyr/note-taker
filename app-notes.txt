function createNewNote(body, notesArray) {
    const note = body;
    notesArray.push(note);
    fs.writeFileSync(
      path.join(__dirname, './db/db.json'),
      JSON.stringify({note: notesArray}, null, 2)
    );
    return note;
  }


function findById(id, notesArray) {
    const result = notesArray.filter(animal => animal.id === id)[0];
    return result;
  }



  ES5 Constructor:

function Note(title, text, date) {
  this.title = title;
  this.text = text;
  this.id = uuidv4(); // uuid gives a random unique note id
  this.dateCreated = date // client-side uses moment.js to parse dates
}

Note.prototype.lastEditDate = function(date) {
  this.edited = date;
}

Note.prototype.saveToJSON  = function() {
  // is this necessary or from client side
}

class Note {
    constructor(title, text) {
        this.title = title;
        this.text = text;
        this.date = new Date();
        this.id = uuidv4();
    }

    getTitle() {
        return this.title;
    }

    getText() {
        return this.text;
    }

    getDateCreated() {
        return this.date; // formatted correctly
    }

    getId() {
        return this.id;
    }

}



!!  Code from eariler projects to help:  !!

var tasks = {}; // change to notes

var createTask = function(taskText, taskDate, taskList) {
  // create elements that make up a task item
  var taskLi = $("<li>").addClass("list-group-item");
  var taskSpan = $("<span>")
    .addClass("badge badge-primary badge-pill")
    .text(taskDate);
  var taskP = $("<p>")
    .addClass("m-1")
    .text(taskText);


var loadTasks = function() {
  tasks = JSON.parse(localStorage.getItem("tasks"));

  // if nothing in localStorage, create a new object to track all task status arrays
  if (!tasks) {
    tasks = {
      toDo: [],
      inProgress: [],
      inReview: [],
      done: []
    };
  }

  // loop over object properties
  $.each(tasks, function(list, arr) {
    console.log(list, arr);
    // then loop over sub-array
    arr.forEach(function(task) {
      createTask(task.text, task.date, list);
    });
  });
};

// EDIT TASKS/NOTES

$(".list-group").on("click", "p", function() {
    var text = $(this)
        .text()
        .trim();
    console.log(text);
    
    var textInput = $("<textarea>")
        .addClass("form-control")
        .val(text);

    $(this).replaceWith(textInput);
    textInput.trigger("focus");
});

$(".list-group").on("blur", "textarea", function() {
    // get the textarea's current value/text
    var text = $(this)
        .val()
        .trim();
    // get the parent ul's id attribute
    var status = $(this)
        .closest(".list-group")
        .attr("id")
        .replace("list-", "");
    
    //get the task's position in the list of other li elements
    var index = $(this)
        .closest(".list-group-item")
        .index();
    
    tasks[status][index].text = text;
    saveTasks();
    
    // recreate p element
    var taskP = $("<p>")
        .addClass("m-1")
        .text(text);
    
    // replace textarea with p element
    $(this).replaceWith(taskP);
    
});